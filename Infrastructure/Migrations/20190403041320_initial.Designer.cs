// <auto-generated />
using System;
using AuthServer.Infrastructure.Data.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AuthServer.Infrastructure.Migrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    [Migration("20190403041320_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AuthServer.Infrastructure.Data.Identity.AppUser", b =>
                {
                    b.Property<string>("Id").HasMaxLength(256)
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp").HasMaxLength(256).HasColumnType("text")
                        .IsConcurrencyToken();

                    b.Property<string>("Email").HasMaxLength(256).HasColumnType("text")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed").HasColumnType("tinyint(1)").HasConversion<int>();

                    b.Property<bool>("LockoutEnabled").HasColumnType("tinyint(1)").HasConversion<int>();

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name").HasMaxLength(256).HasColumnType("text");

                    b.Property<string>("NormalizedEmail").HasMaxLength(256);

                    b.Property<string>("NormalizedUserName").HasMaxLength(256);

                    b.Property<string>("PasswordHash").HasMaxLength(256).HasColumnType("text");

                    b.Property<string>("PhoneNumber").HasMaxLength(256).HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed").HasColumnType("tinyint(1)").HasConversion<int>();

                    b.Property<string>("SecurityStamp").HasMaxLength(256).HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled").HasColumnType("tinyint(1)").HasConversion<int>();

                    b.Property<string>("UserName").HasMaxLength(256).HasColumnType("text")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id").HasMaxLength(256)
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp").HasMaxLength(256).HasColumnType("text")
                        .IsConcurrencyToken();

                    b.Property<string>("Name").HasMaxLength(256).HasColumnType("text");

                    b.Property<string>("NormalizedName").HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "27e8d4aa-67ca-48af-a986-7059029dbefb",
                            ConcurrencyStamp = "96def603-94ae-4f01-b766-fc2bee1f06ab",
                            Name = "consumer",
                            NormalizedName = "CONSUMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType").HasMaxLength(256).HasColumnType("text");

                    b.Property<string>("ClaimValue").HasMaxLength(256).HasColumnType("text");

                    b.Property<string>("RoleId").HasMaxLength(256)
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType").HasMaxLength(256).HasColumnType("text");

                    b.Property<string>("ClaimValue").HasMaxLength(256).HasColumnType("text");

                    b.Property<string>("UserId").HasMaxLength(256)
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider").HasMaxLength(256);

                    b.Property<string>("ProviderKey").HasMaxLength(256);

                    b.Property<string>("ProviderDisplayName").HasMaxLength(256).HasColumnType("text");

                    b.Property<string>("UserId").HasMaxLength(256)
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId").HasMaxLength(256);

                    b.Property<string>("RoleId").HasMaxLength(256);

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId").HasMaxLength(256);

                    b.Property<string>("LoginProvider").HasMaxLength(256);

                    b.Property<string>("Name").HasMaxLength(256);

                    b.Property<string>("Value").HasMaxLength(256).HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AuthServer.Infrastructure.Data.Identity.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AuthServer.Infrastructure.Data.Identity.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AuthServer.Infrastructure.Data.Identity.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AuthServer.Infrastructure.Data.Identity.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
